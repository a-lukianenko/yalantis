{"version":3,"sources":["helpers/sorter.ts","features/employees/employeesSlice.ts","app/hooks.ts","helpers/enlgish.ts","pages/Employees/components/Employee/components/RadioInput/index.tsx","pages/Employees/components/Employee/index.tsx","pages/Employees/components/EmployeeList/index.tsx","pages/Employees/components/AlphaBeticView/index.tsx","pages/Employees/components/EmployeeBD/index.tsx","helpers/formatDate.ts","pages/Employees/components/BirthdayDisplay/index.tsx","pages/Employees/index.tsx","pages/NotFound/index.tsx","App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["sortedByLastName","employees","cloneDeep","sort","a","b","lastName","localeCompare","sorterLastName","compose","reduce","acc","item","firstChar","toLocaleLowerCase","push","sorterMonth","month","Date","dob","getMonth","regroupByCurrentMonth","months","Array","keys","currentMonth","idx","indexOf","slice","initialState","JSON","parse","localStorage","getItem","fetchEmployees","createAsyncThunk","axios","get","process","response","data","employeesSlice","createSlice","name","reducers","selectEmployee","state","action","find","employee","id","payload","status","deselectEmployee","extraReducers","builder","addCase","fulfilled","withStatus","map","actions","employeesSelector","employeesSortedLastNameSelector","createSelector","selectedEmployeesGroupedByMonthSelector","filter","selected","useAppDispatch","useDispatch","useAppSelector","useSelector","split","RadioInput","labelTitle","value","isChecked","onChange","style","display","type","checked","useStyles","createUseStyles","theme","employeeName","fontWeight","color","card","padding","marginBottom","borderRadius","boxShadow","Employee","classes","cx","classNames","bind","dispatch","useState","setStatus","onStatusChange","e","target","firstName","className","EmployeeList","list","AlphabeticView","alphabet","groupedData","letter","toUpperCase","EmployeeBDList","d","toLocaleDateString","year","day","BirthdayDisplay","groupedEmployees","length","getMonthName","dateMonth","monthName","toLocaleString","toString","container","justifyContent","Employees","employeesSortedLastName","useEffect","window","addEventListener","setItem","stringify","englishAlphabet","NotFound","history","useHistory","root","h1","h2","onClick","flexDirection","alignItems","height","backgroundImage","textShadow","margin","lineHeight","fontSize","App","exact","from","to","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","employeesReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b3d81669.chunk.js","sourcesContent":["import { cloneDeep } from 'lodash';\r\nimport { compose } from 'lodash/fp';\r\nimport { TEmployee } from 'types/Types';\r\n\r\nexport type TSortedEmployees = Record<string, TEmployee[]>;\r\n\r\n//\r\nexport const sortedByLastName = (employees: TEmployee[]) =>\r\n  cloneDeep(employees).sort((a, b) => a.lastName.localeCompare(b.lastName));\r\n\r\nconst groupedAlpha = (employees: TEmployee[]) => {\r\n  return employees.reduce((acc, item) => {\r\n    const firstChar = item.lastName[0].toLocaleLowerCase();\r\n    if (!acc[firstChar]) {\r\n      acc[firstChar] = [];\r\n    }\r\n    acc[firstChar].push(item);\r\n    return acc;\r\n  }, {} as TSortedEmployees);\r\n};\r\nexport const sorterLastName = compose(groupedAlpha, sortedByLastName);\r\n\r\n//\r\nconst groupedByMonth = (employees: TEmployee[]) => {\r\n  return employees.reduce((acc, item) => {\r\n    const month = new Date(item.dob).getMonth();\r\n    if (!acc[month]) {\r\n      acc[month] = [];\r\n    }\r\n    acc[month].push(item);\r\n    return acc;\r\n  }, {} as TSortedEmployees);\r\n};\r\nexport const sorterMonth = compose(groupedByMonth, sortedByLastName);\r\n\r\n//\r\nexport const regroupByCurrentMonth = () => {\r\n  const months = [...Array(12).keys()];\r\n  const currentMonth = new Date().getMonth();\r\n  const idx = months.indexOf(currentMonth);\r\n  return [...months.slice(idx), ...months.slice(0, idx)];\r\n};\r\n","import {\r\n  createAsyncThunk,\r\n  createSelector,\r\n  createSlice,\r\n  PayloadAction,\r\n} from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport { TEmployee } from 'types/Types';\r\nimport { RootState } from 'app/store';\r\nimport { sorterLastName, sorterMonth } from 'helpers/sorter';\r\n\r\ntype TEmployeeSlice = {\r\n  employees: TEmployee[];\r\n};\r\n\r\nconst initialState: TEmployeeSlice = {\r\n  employees:\r\n    (JSON.parse(localStorage.getItem('employees')!) as TEmployee[]) || [],\r\n};\r\n\r\nexport const fetchEmployees = createAsyncThunk(\r\n  'employees/fetchByIdStatus',\r\n  async () => {\r\n    if (localStorage.getItem('employees')) {\r\n      return JSON.parse(localStorage.getItem('employees')!);\r\n    } else {\r\n      const response = await axios.get(process.env.REACT_APP_API as string);\r\n      return response.data as TEmployee[];\r\n    }\r\n  }\r\n);\r\n\r\nconst employeesSlice = createSlice({\r\n  name: 'employees',\r\n  initialState,\r\n  reducers: {\r\n    selectEmployee: (state, action: PayloadAction<TEmployee>) => {\r\n      state.employees.find(\r\n        (employee) => employee.id === action.payload.id\r\n      )!.status = 'active';\r\n    },\r\n    deselectEmployee: (state, action: PayloadAction<TEmployee>) => {\r\n      state.employees.find(\r\n        (employee) => employee.id === action.payload.id\r\n      )!.status = 'inactive';\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(\r\n      fetchEmployees.fulfilled,\r\n      (state, action: PayloadAction<TEmployee[]>) => {\r\n        if ('status' in action.payload[0]) {\r\n          state.employees = action.payload;\r\n        } else {\r\n          const withStatus = action.payload.map((employee) => {\r\n            employee.status = 'inactive';\r\n            return employee;\r\n          });\r\n          state.employees = withStatus;\r\n        }\r\n      }\r\n    );\r\n  },\r\n});\r\n\r\n// action creators\r\nexport const { selectEmployee, deselectEmployee } = employeesSlice.actions;\r\n\r\n//selectors\r\nexport const employeesSelector = (state: RootState) =>\r\n  state.employees.employees;\r\nexport const selectedEmployeesSelector = (state: RootState) =>\r\n  state.employees.employees.filter((employee) => employee.status === 'active');\r\nexport const employeesSortedLastNameSelector = createSelector(\r\n  employeesSelector,\r\n  (employees) => sorterLastName(employees)\r\n);\r\n\r\nexport const selectedEmployeesGroupedByMonthSelector = createSelector(\r\n  selectedEmployeesSelector,\r\n  (selected) => sorterMonth(selected)\r\n);\r\n\r\n// reducer\r\nexport default employeesSlice.reducer;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","export default 'abcdefghijklmnopqrstuvwxyz'.split('');\r\n","type IProps = {\r\n  labelTitle: string;\r\n  name: string;\r\n  value: string;\r\n  isChecked: boolean;\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n};\r\n\r\nexport const RadioInput = ({\r\n  labelTitle,\r\n  name,\r\n  value,\r\n  isChecked,\r\n  onChange,\r\n}: IProps) => {\r\n  return (\r\n    <label style={{ display: 'block' }}>\r\n      {labelTitle}\r\n      <input\r\n        type=\"radio\"\r\n        name={name}\r\n        value={value}\r\n        checked={isChecked}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { createUseStyles } from 'react-jss';\r\nimport classNames from 'classnames/bind';\r\nimport { TEmployee } from 'types/Types';\r\nimport { useAppDispatch } from 'app/hooks';\r\n\r\n// actions\r\nimport {\r\n  deselectEmployee,\r\n  selectEmployee,\r\n} from 'features/employees/employeesSlice';\r\n\r\n// components\r\nimport { RadioInput } from './components/RadioInput';\r\n\r\n// Types\r\ntype TProps = {\r\n  employee: TEmployee;\r\n};\r\ntype TStatus = 'active' | 'inactive';\r\n\r\n// styles\r\nconst useStyles = createUseStyles((theme) => ({\r\n  employeeName: {\r\n    fontWeight: 'bold',\r\n    color: 'blue',\r\n  },\r\n  card: {\r\n    padding: 10,\r\n    marginBottom: 8,\r\n    borderRadius: 6,\r\n    boxShadow: '0 1px 6px 0 rgb(32 33 36 / 28%)',\r\n  },\r\n}));\r\n\r\nexport const Employee = ({ employee }: TProps) => {\r\n  const classes = useStyles();\r\n  let cx = classNames.bind(classes);\r\n  const dispatch = useAppDispatch();\r\n  const [status, setStatus] = useState<TStatus>(employee.status as TStatus);\r\n\r\n  const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = e.target;\r\n\r\n    value === 'active'\r\n      ? dispatch(selectEmployee(employee))\r\n      : dispatch(deselectEmployee(employee));\r\n\r\n    setStatus(e.target.value as TStatus);\r\n  };\r\n\r\n  const { firstName, lastName } = employee;\r\n  const className = cx({ employeeName: status === 'active' });\r\n\r\n  return (\r\n    <div className={classes.card}>\r\n      <span className={className}>\r\n        {firstName} {lastName}\r\n      </span>\r\n      <form>\r\n        <RadioInput\r\n          labelTitle=\"Active\"\r\n          name=\"status\"\r\n          value=\"active\"\r\n          isChecked={status === 'active'}\r\n          onChange={onStatusChange}\r\n        />\r\n        <RadioInput\r\n          labelTitle=\"Not active\"\r\n          name=\"status\"\r\n          value=\"inactive\"\r\n          isChecked={status === 'inactive'}\r\n          onChange={onStatusChange}\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import { TEmployee } from 'types/Types';\r\nimport { Employee } from '../Employee';\r\n\r\ntype IProps = {\r\n  employees: TEmployee[];\r\n};\r\n\r\nexport const EmployeeList = ({ employees }: IProps) => {\r\n  const list = employees.map((employee) => (\r\n    <Employee employee={employee} key={employee.id} />\r\n  ));\r\n  return <div>{list}</div>;\r\n};\r\n","import { TSortedEmployees } from 'helpers/sorter';\r\nimport { EmployeeList } from '../EmployeeList';\r\n\r\ntype IProps = {\r\n  alphabet: string[];\r\n  groupedData: TSortedEmployees;\r\n};\r\nexport const AlphabeticView = ({ alphabet, groupedData }: IProps) => {\r\n  return (\r\n    <div>\r\n      <h3>Employees</h3>\r\n      {alphabet.map((letter) => {\r\n        const list = groupedData[letter];\r\n        return (\r\n          <div key={letter}>\r\n            <h3>{letter.toUpperCase()}</h3>\r\n            {list ? <EmployeeList employees={groupedData[letter]} /> : '-----'}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import { formatDate } from 'helpers/formatDate';\r\nimport { TEmployee } from 'types/Types';\r\n\r\ntype IProps = {\r\n  employees: TEmployee[];\r\n};\r\n\r\nexport const EmployeeBDList = ({ employees }: IProps) => {\r\n  return (\r\n    <div>\r\n      {employees.map((employee) => {\r\n        const { id, firstName, lastName, dob } = employee;\r\n        return (\r\n          <div key={id}>\r\n            {firstName} {lastName} - {formatDate(dob)}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","export const formatDate = (d: string | Date) => {\r\n  return new Date(d).toLocaleDateString('default', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric',\r\n  });\r\n};\r\n","import { useAppSelector } from 'app/hooks';\r\nimport { selectedEmployeesGroupedByMonthSelector } from 'features/employees/employeesSlice';\r\nimport { regroupByCurrentMonth } from 'helpers/sorter';\r\nimport { keys } from 'lodash/fp';\r\nimport { EmployeeBDList } from '../EmployeeBD';\r\n\r\nexport const BirthdayDisplay = () => {\r\n  const groupedEmployees = useAppSelector(\r\n    selectedEmployeesGroupedByMonthSelector\r\n  );\r\n\r\n  if (keys(groupedEmployees).length < 1) {\r\n    return (\r\n      <div>\r\n        <h3>Employees List is empty</h3>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const getMonthName = (d: string | Date) => {\r\n    const currentMonth = new Date().getMonth();\r\n    const dateMonth = new Date(d).getMonth();\r\n    const monthName = new Date(d).toLocaleString('default', {\r\n      month: 'long',\r\n    });\r\n\r\n    return currentMonth === dateMonth ? monthName + ' (current)' : monthName;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Employees birthdays</h3>\r\n      {regroupByCurrentMonth().map((month) => {\r\n        const list = groupedEmployees[month];\r\n        return (\r\n          <div key={month.toString()}>\r\n            <h3>{list && getMonthName(list[0].dob)} </h3>\r\n            {list && <EmployeeBDList employees={list} />}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import {\r\n  employeesSelector,\r\n  employeesSortedLastNameSelector,\r\n  fetchEmployees,\r\n} from 'features/employees/employeesSlice';\r\nimport { useEffect } from 'react';\r\nimport { useAppDispatch, useAppSelector } from 'app/hooks';\r\nimport englishAlphabet from 'helpers/enlgish';\r\nimport { AlphabeticView } from './components/AlphaBeticView';\r\nimport { BirthdayDisplay } from './components/BirthdayDisplay';\r\nimport { createUseStyles } from 'react-jss';\r\n\r\nconst useStyles = createUseStyles((theme) => ({\r\n  container: {\r\n    display: 'flex',\r\n    justifyContent: 'space-around',\r\n  },\r\n}));\r\n\r\nexport const Employees = () => {\r\n  const employees = useAppSelector(employeesSelector);\r\n  const employeesSortedLastName = useAppSelector(\r\n    employeesSortedLastNameSelector\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchEmployees());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('beforeunload', () => {\r\n      localStorage.setItem('employees', JSON.stringify(employees));\r\n    });\r\n  }, [employees]);\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <AlphabeticView\r\n        alphabet={englishAlphabet}\r\n        groupedData={employeesSortedLastName}\r\n      />\r\n      <BirthdayDisplay />\r\n    </div>\r\n  );\r\n};\r\n","import { useHistory } from 'react-router-dom';\r\nimport { createUseStyles } from 'react-jss';\r\n\r\nexport const NotFound = () => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <h1 className={classes.h1}>404</h1>\r\n      <h2 className={classes.h2}>Not Found</h2>\r\n      <button onClick={() => history.push('/')}>Home</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst useStyles = createUseStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    height: '100vh',\r\n    backgroundImage:\r\n      'linear-gradient( 135.9deg,  rgba(109,25,252,1) 16.4%, rgba(125,31,165,1) 56.1% )',\r\n    color: '#e0e0e0',\r\n    textShadow: '5px 0px 6px #101010e3',\r\n  },\r\n  h1: {\r\n    margin: 0,\r\n    lineHeight: 1,\r\n    fontSize: 152,\r\n  },\r\n  h2: {\r\n    margin: 0,\r\n    fontSize: 50,\r\n  },\r\n}));\r\n","import { Employees } from './pages/Employees';\r\nimport { Switch, Redirect, Route } from 'react-router-dom';\r\nimport { NotFound } from 'pages/NotFound';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Switch>\r\n      <Redirect exact from=\"/\" to=\"/employees\" />\r\n      <Route exact path=\"/employees\" component={Employees} />\r\n      <Route path=\"*\" component={NotFound} />\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport employeesReducer from 'features/employees/employeesSlice';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    employees: employeesReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from 'app/store';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router>\r\n        <App />\r\n      </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}